//
// File generated by rootcint at Fri Oct 31 11:01:44 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME FitPulseDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FitPulseDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void FitPulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FitPulse(void *p = 0);
   static void *newArray_FitPulse(Long_t size, void *p);
   static void delete_FitPulse(void *p);
   static void deleteArray_FitPulse(void *p);
   static void destruct_FitPulse(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FitPulse*)
   {
      ::FitPulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FitPulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FitPulse", ::FitPulse::Class_Version(), "./../src/FitPulse.h", 44,
                  typeid(::FitPulse), DefineBehavior(ptr, ptr),
                  &::FitPulse::Dictionary, isa_proxy, 4,
                  sizeof(::FitPulse) );
      instance.SetNew(&new_FitPulse);
      instance.SetNewArray(&newArray_FitPulse);
      instance.SetDelete(&delete_FitPulse);
      instance.SetDeleteArray(&deleteArray_FitPulse);
      instance.SetDestructor(&destruct_FitPulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FitPulse*)
   {
      return GenerateInitInstanceLocal((::FitPulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FitPulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *FitPulse::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FitPulse::Class_Name()
{
   return "FitPulse";
}

//______________________________________________________________________________
const char *FitPulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FitPulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FitPulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FitPulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FitPulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FitPulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FitPulse::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FitPulse*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void FitPulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class FitPulse.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FitPulse::Class(),this);
   } else {
      R__b.WriteClassBuffer(FitPulse::Class(),this);
   }
}

//______________________________________________________________________________
void FitPulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FitPulse.
      TClass *R__cl = ::FitPulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessedTrace", (void*)&fProcessedTrace);
      R__insp.InspectMember("vector<Float_t>", (void*)&fProcessedTrace, "fProcessedTrace.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProcessedTraceFFT", (void*)&fProcessedTraceFFT);
      R__insp.InspectMember("vector<Float_t>", (void*)&fProcessedTraceFFT, "fProcessedTraceFFT.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPattern", (void*)&fPattern);
      R__insp.InspectMember("vector<Float_t>", (void*)&fPattern, "fPattern.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBasicPreprocessed", &fBasicPreprocessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBaseStart", &fBaseStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBaseStop", &fBaseStop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowed", &fWindowed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanBase", &fMeanBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimpleAmplBin", &fSimpleAmplBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimpleAmpl", &fSimpleAmpl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeakBins", (void*)&fPeakBins);
      R__insp.InspectMember("vector<Int_t>", (void*)&fPeakBins, "fPeakBins.", false);
      EdwPulse::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FitPulse(void *p) {
      return  p ? new(p) ::FitPulse : new ::FitPulse;
   }
   static void *newArray_FitPulse(Long_t nElements, void *p) {
      return p ? new(p) ::FitPulse[nElements] : new ::FitPulse[nElements];
   }
   // Wrapper around operator delete
   static void delete_FitPulse(void *p) {
      delete ((::FitPulse*)p);
   }
   static void deleteArray_FitPulse(void *p) {
      delete [] ((::FitPulse*)p);
   }
   static void destruct_FitPulse(void *p) {
      typedef ::FitPulse current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FitPulse

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* FitPulseDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableFitPulseDict();

extern "C" void G__set_cpp_environmentFitPulseDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("../src/FitPulse.cc");
  G__cpp_reset_tagtableFitPulseDict();
}
#include <new>
extern "C" int G__cpp_dllrevFitPulseDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FitPulse */
static int G__FitPulseDict_680_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FitPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse[n];
     } else {
       p = new((void*) gvp) FitPulse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse;
     } else {
       p = new((void*) gvp) FitPulse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FitPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new FitPulse((EdwPulse*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) FitPulse((EdwPulse*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FitPulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *((string*) G__int(libp->para[4])));
     } else {
       p = new((void*) gvp) FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, *((string*) G__int(libp->para[4])));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) FitPulse(
(EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FitPulse((EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FitPulse((EdwPulse*) G__int(libp->para[0]), (EdwPulse*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FitPulse*) G__getstructoffset())->FitTimeMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FitPulse*) G__getstructoffset())->FitTimeMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FitPulse*) G__getstructoffset())->FitTimeStep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FitPulse*) G__getstructoffset())->PeakOutsideWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->ProcessedTrace();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FitPulse*) G__getstructoffset())->ProcessedTrace((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->ProcessedTraceFFT();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FitPulse*) G__getstructoffset())->MeanBase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->Pattern();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const FitPulse*) G__getstructoffset())->NbPeaks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const FitPulse*) G__getstructoffset())->PeakBins();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const FitPulse*) G__getstructoffset())->SimpleAmpl());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const FitPulse*) G__getstructoffset())->SimpleAmplBin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FitPulse*) G__getstructoffset())->BasicPreprocess((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FitPulse*) G__getstructoffset())->BasicPreprocess();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FitPulse*) G__getstructoffset())->RemoveSaturatedSpikes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FitPulse*) G__getstructoffset())->RemoveSaturatedSpikes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((FitPulse*) G__getstructoffset())->FindGlitches((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((FitPulse*) G__getstructoffset())->FindGlitches());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((FitPulse*) G__getstructoffset())->TraceFullySaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FitPulse*) G__getstructoffset())->RemoveBaseline();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FitPulse*) G__getstructoffset())->RemoveLinearBase();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FitPulse*) G__getstructoffset())->RemovePattern((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FitPulse*) G__getstructoffset())->SetBaseFromPeakBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FitPulse*) G__getstructoffset())->ApplyWindow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FitPulse*) G__getstructoffset())->ApplyWindow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((FitPulse*) G__getstructoffset())->FindPeaks((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((FitPulse*) G__getstructoffset())->FindPeaks((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((FitPulse*) G__getstructoffset())->FindPeaks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((FitPulse*) G__getstructoffset())->FindPeaksWithParams((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((FitPulse*) G__getstructoffset())->FindPeaksWithParams((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((FitPulse*) G__getstructoffset())->ComputeTraceFFT((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((FitPulse*) G__getstructoffset())->ComputeTraceFFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->SmoothedTrace((UInt_t) G__int(libp->para[0]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->SmoothedTrace();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Float_t>* pobj;
         const vector<Float_t> xobj = ((const FitPulse*) G__getstructoffset())->SmoothedAmpl(*(vector<Float_t>*) libp->para[0].ref);
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetRiseTimeParams((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetRiseTimeParams((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetRiseTimeParams((const Float_t) G__double(libp->para[0]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetRiseTimeParams();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetRiseTime((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetRiseTime((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetRiseTime((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetRiseTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFallTimeParams((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFallTimeParams((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFallTimeParams((const Float_t) G__double(libp->para[0]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFallTimeParams();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFallTime((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFallTime((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFallTime((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFallTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFWHMParams((const Float_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFWHMParams((const Float_t) G__double(libp->para[0]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->GetFWHMParams();
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFWHM((const Float_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFWHM((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((FitPulse*) G__getstructoffset())->GetFWHM());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->ComputeWienerAmpl(*(vector<Float_t>*) libp->para[0].ref, *(vector<Float_t>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->ComputeWienerAmpl(*(vector<Float_t>*) libp->para[0].ref, *(vector<Float_t>*) libp->para[1].ref);
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->ComputeWienerFast(*(vector<Float_t>*) libp->para[0].ref, (const Float_t) G__double(libp->para[1]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->WienerLoop((EdwTemplate*) G__int(libp->para[0]), *(vector<Float_t>*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 5:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->WienerLoop((EdwTemplate*) G__int(libp->para[0]), *(vector<Float_t>*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->WienerLoop((EdwTemplate*) G__int(libp->para[0]), *(vector<Float_t>*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->WienerLoop((EdwTemplate*) G__int(libp->para[0]), *(vector<Float_t>*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<Float_t>* pobj;
         vector<Float_t> xobj = ((FitPulse*) G__getstructoffset())->WienerLoop((EdwTemplate*) G__int(libp->para[0]), *(vector<Float_t>*) libp->para[1].ref);
         pobj = new vector<Float_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FitPulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FitPulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FitPulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FitPulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FitPulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FitPulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FitPulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FitPulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FitPulseDict_680_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FitPulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FitPulseDict_680_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   FitPulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new FitPulse(*(FitPulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FitPulse G__TFitPulse;
static int G__FitPulseDict_680_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FitPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FitPulse*) (soff+(sizeof(FitPulse)*i)))->~G__TFitPulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FitPulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FitPulse*) (soff))->~G__TFitPulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FitPulseDict_680_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FitPulse* dest = (FitPulse*) G__getstructoffset();
   *dest = *(FitPulse*) libp->para[0].ref;
   const FitPulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FitPulse */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFitPulseDict {
 public:
  G__Sizep2memfuncFitPulseDict(): p(&G__Sizep2memfuncFitPulseDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFitPulseDict::*p)();
};

size_t G__get_sizep2memfuncFitPulseDict()
{
  G__Sizep2memfuncFitPulseDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFitPulseDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse))) {
     FitPulse *G__Lderived;
     G__Lderived=(FitPulse*)0x1000;
     {
       EdwPulse *G__Lpbase=(EdwPulse*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse),G__get_linked_tagnum(&G__FitPulseDictLN_EdwPulse),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse),G__get_linked_tagnum(&G__FitPulseDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFitPulseDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BoloStr>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEBoloStrcOallocatorlEBoloStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEBoloStrcOallocatorlEBoloStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RunStr>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlERunStrcOallocatorlERunStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlERunStrcOallocatorlERunStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PeriodStr>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEPeriodStrcOallocatorlEPeriodStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEPeriodStrcOallocatorlEPeriodStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TemplateStr>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlETemplateStrcOallocatorlETemplateStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlETemplateStrcOallocatorlETemplateStrgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Short_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Float_t> >",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FitPulseDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FitPulse */
static void G__setup_memvarFitPulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   { FitPulse *p; p=(FitPulse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fProcessedTrace=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fProcessedTraceFFT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<Float_t>"),-1,4,"fPattern=",0,"*< Pattern */");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBasicPreprocessed=",0,"*< Set to 1 if baseline substraction, depatterning.. were already done for that pulse */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBaseStart=",0,"*< Pretrigger */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBaseStop=",0,"*< Pretrigger */");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWindowed=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanBase=",0,"*< Average value of baseline from the pretrigger region */");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSimpleAmplBin=",0,"*< Raw amplitude */");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSimpleAmpl=",0,"*< Raw amplitude */");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fPeakBins=",0,"*< Position of peaks detected by the raw peakfinder algorithm */");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FitPulseDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFitPulseDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFitPulse(void) {
   /* FitPulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse));
   G__memfunc_setup("FitPulse",812,G__FitPulseDict_680_0_1, 105, G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitPulse",812,G__FitPulseDict_680_0_2, 105, G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse), -1, 0, 1, 1, 1, 0, "U 'EdwPulse' - 10 - aPulse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitPulse",812,G__FitPulseDict_680_0_3, 105, G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse), -1, 0, 5, 1, 1, 0, 
"U 'EdwPulse' - 10 - aPulse1 U 'EdwPulse' - 10 - aPulse2 "
"f - 'Float_t' 0 '1' lambda1 f - 'Float_t' 0 '1' lambda2 "
"u 'string' - 0 '\"Combinaison\"' comb_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTimeMin",982,G__FitPulseDict_680_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTimeMax",984,G__FitPulseDict_680_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTimeStep",1102,G__FitPulseDict_680_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PeakOutsideWindow",1750,G__FitPulseDict_680_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessedTrace",1431,G__FitPulseDict_680_0_8, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessedTrace",1431,G__FitPulseDict_680_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessedTraceFFT",1655,G__FitPulseDict_680_0_10, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MeanBase",764,G__FitPulseDict_680_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "*< Baseline level */", (void*) NULL, 0);
   G__memfunc_setup("Pattern",734,G__FitPulseDict_680_0_12, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NbPeaks",676,G__FitPulseDict_680_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PeakBins",781,G__FitPulseDict_680_0_14, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SimpleAmpl",1012,G__FitPulseDict_680_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SimpleAmplBin",1293,G__FitPulseDict_680_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BasicPreprocess",1544,G__FitPulseDict_680_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 '0' aCheckPeak", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveSaturatedSpikes",2186,G__FitPulseDict_680_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '3' maxlength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindGlitches",1204,G__FitPulseDict_680_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1000' glitch_ampl", "param par defaut en dur..", (void*) NULL, 0);
   G__memfunc_setup("TraceFullySaturated",1960,G__FitPulseDict_680_0_20, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveBaseline",1425,G__FitPulseDict_680_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveLinearBase",1604,G__FitPulseDict_680_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemovePattern",1356,G__FitPulseDict_680_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aNbPatternPts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBaseFromPeakBin",1749,G__FitPulseDict_680_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyWindow",1150,G__FitPulseDict_680_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' aWidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPeaks",885,G__FitPulseDict_680_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - aCriterium g - 'Bool_t' 0 '0' AnySign "
"i - 'Int_t' 0 'FP_LENGTH' aLength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPeaksWithParams",1909,G__FitPulseDict_680_0_27, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - aSensitivity i - 'Int_t' 0 - aLength "
"i - 'Int_t' 0 - aOrder g - 'Bool_t' 0 '0' AnySign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeTraceFFT",1452,G__FitPulseDict_680_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 '1' aWindowFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothedTrace",1330,G__FitPulseDict_680_0_29, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmoothing", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothedAmpl",1229,G__FitPulseDict_680_0_30, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 1, 1, 1, 8, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - aSmoothTrace", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRiseTimeParams",1702,G__FitPulseDict_680_0_31, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 '0.2' aFracLow f - 'Float_t' 10 '0.9' aFracHigh "
"h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", "* returns [risetime,t0,a0,a1] */", (void*) NULL, 0);
   G__memfunc_setup("GetRiseTime",1090,G__FitPulseDict_680_0_32, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 '0.2' aFracLow f - 'Float_t' 10 '0.9' aFracHigh "
"h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFallTimeParams",1682,G__FitPulseDict_680_0_33, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 '0.3' aFracLow f - 'Float_t' 10 '0.9' aFracHigh "
"h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", "* returns [falltime,t0,a0,a1] */", (void*) NULL, 0);
   G__memfunc_setup("GetFallTime",1070,G__FitPulseDict_680_0_34, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 '0.3' aFracLow f - 'Float_t' 10 '0.9' aFracHigh "
"h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFWHMParams",1206,G__FitPulseDict_680_0_35, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 '0.5' aFracWidth h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", "* returns [fwhm,t_start,ampl_at_fwhm] */", (void*) NULL, 0);
   G__memfunc_setup("GetFWHM",594,G__FitPulseDict_680_0_36, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 '0.5' aFracWidth h - 'UInt_t' 0 'PULSESHAPE_SMOOTHING' aSmooth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeWienerAmpl",1745,G__FitPulseDict_680_0_37, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 3, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - aTemplateFFT u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - aNoise "
"g - 'Bool_t' 0 '0' aChi2Switch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeWienerFast",1749,G__FitPulseDict_680_0_38, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 2, 1, 1, 0, 
"u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - aKernel f - 'Float_t' 10 - aDenom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WienerLoop",1028,G__FitPulseDict_680_0_39, 117, G__get_linked_tagnum(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<Float_t>"), 0, 6, 1, 1, 0, 
"U 'EdwTemplate' - 10 - aTemplate u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - aNoise "
"i - 'Int_t' 0 '-10000' OffsetMin i - 'Int_t' 0 '-10000' OffsetMax "
"f - 'Float_t' 0 '0' OffsetStep g - 'Bool_t' 0 '1' aFast", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FitPulseDict_680_0_40, 85, G__get_linked_tagnum(&G__FitPulseDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FitPulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FitPulseDict_680_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FitPulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FitPulseDict_680_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FitPulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FitPulseDict_680_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FitPulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FitPulseDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FitPulseDict_680_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FitPulseDict_680_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FitPulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FitPulseDict_680_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FitPulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FitPulseDict_680_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FitPulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FitPulseDict_680_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FitPulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("FitPulse", 812, G__FitPulseDict_680_0_52, (int) ('i'), G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse), -1, 0, 1, 1, 1, 0, "u 'FitPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FitPulse", 938, G__FitPulseDict_680_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FitPulseDict_680_0_54, (int) ('u'), G__get_linked_tagnum(&G__FitPulseDictLN_FitPulse), -1, 1, 1, 1, 1, 0, "u 'FitPulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFitPulseDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFitPulseDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFitPulseDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FitPulseDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR = { "vector<BoloStr,allocator<BoloStr> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEBoloStrcOallocatorlEBoloStrgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<BoloStr,allocator<BoloStr> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR = { "vector<RunStr,allocator<RunStr> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlERunStrcOallocatorlERunStrgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<RunStr,allocator<RunStr> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR = { "vector<PeriodStr,allocator<PeriodStr> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEPeriodStrcOallocatorlEPeriodStrgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<PeriodStr,allocator<PeriodStr> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR = { "vector<TemplateStr,allocator<TemplateStr> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlETemplateStrcOallocatorlETemplateStrgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TemplateStr,allocator<TemplateStr> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_EdwPulse = { "EdwPulse" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_EdwTemplate = { "EdwTemplate" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__FitPulseDictLN_FitPulse = { "FitPulse" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFitPulseDict() {
  G__FitPulseDictLN_TClass.tagnum = -1 ;
  G__FitPulseDictLN_TBuffer.tagnum = -1 ;
  G__FitPulseDictLN_TMemberInspector.tagnum = -1 ;
  G__FitPulseDictLN_TObject.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_string.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__FitPulseDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__FitPulseDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__FitPulseDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__FitPulseDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEBoloStrcOallocatorlEBoloStrgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlERunStrcOallocatorlERunStrgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEPeriodStrcOallocatorlEPeriodStrgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlETemplateStrcOallocatorlETemplateStrgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_EdwPulse.tagnum = -1 ;
  G__FitPulseDictLN_EdwTemplate.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__FitPulseDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FitPulseDictLN_FitPulse.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFitPulseDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_string);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEBoloStrcOallocatorlEBoloStrgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEBoloStrcOallocatorlEBoloStrgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlERunStrcOallocatorlERunStrgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlERunStrcOallocatorlERunStrgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEPeriodStrcOallocatorlEPeriodStrgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEPeriodStrcOallocatorlEPeriodStrgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlETemplateStrcOallocatorlETemplateStrgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlETemplateStrcOallocatorlETemplateStrgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_EdwPulse);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_EdwTemplate);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__FitPulseDictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FitPulseDictLN_FitPulse),sizeof(FitPulse),-1,324864,(char*)NULL,G__setup_memvarFitPulse,G__setup_memfuncFitPulse);
}
extern "C" void G__cpp_setupFitPulseDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupFitPulseDict()");
  G__set_cpp_environmentFitPulseDict();
  G__cpp_setup_tagtableFitPulseDict();

  G__cpp_setup_inheritanceFitPulseDict();

  G__cpp_setup_typetableFitPulseDict();

  G__cpp_setup_memvarFitPulseDict();

  G__cpp_setup_memfuncFitPulseDict();
  G__cpp_setup_globalFitPulseDict();
  G__cpp_setup_funcFitPulseDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFitPulseDict();
  return;
}
class G__cpp_setup_initFitPulseDict {
  public:
    G__cpp_setup_initFitPulseDict() { G__add_setup_func("FitPulseDict",(G__incsetup)(&G__cpp_setupFitPulseDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFitPulseDict() { G__remove_setup_func("FitPulseDict"); }
};
G__cpp_setup_initFitPulseDict G__cpp_setup_initializerFitPulseDict;

